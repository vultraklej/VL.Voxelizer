shader VoxelizerPos3_ComputeFX : VoxelizerBase, CollisionUtils, TriangleStruct
{
    bool Front;

    StructuredBuffer<float3> Positions;
    StructuredBuffer<int> Indices;
    
    RWStructuredBuffer<VoxelPos3> Voxels;

    override void Compute()
    {
        uint index = streams.DispatchThreadId.x;
        uint startIndex = index * 3;

        Triangle tri = GetTriangle(Positions, Indices, startIndex);

        float3 v0 = tri.A;
        float3 v1 = tri.B;
        float3 v2 = tri.C;

        if (Front && !tri.Front) return;

        int width = Size.x;
        int height = Size.y;
        int depth = Size.z;

        float3 triMin = min(min(v0, v1), v2);
        float3 triMax = max(max(v0, v1), v2);

        // Convert to grid coordinates
        int3 gridMin = clamp(int3(floor((triMin - Start) / Unit)), 0, Size - 1);
        int3 gridMax = clamp(int3(ceil((triMax - Start) / Unit)), 0, Size - 1);

        // Fill voxels within bounds
        for (int z = gridMin.z; z <= gridMax.z; z++)
        {
            for (int y = gridMin.y; y <= gridMax.y; y++)
            {
                for (int x = gridMin.x; x <= gridMax.x; x++)
                {
                    float3 center = Start + (float3(x, y, z) + 0.5f) * Unit;
                    AABB aabb;
                    aabb.center = center;
                    aabb.min = center - 0.5f * Unit;
                    aabb.max = center + 0.5f * Unit;

                    if (!intersects_tri_aabb(v0, v1, v2, aabb))
                    {
                        continue;
                    }

                    int voxelIndex = GetVoxelIndex(x, y, z);
                    VoxelPos3 voxel = Voxels[voxelIndex];
                    voxel.Position = center;
                    voxel.Front = tri.Front;
                    voxel.Fill = true;

                    Voxels[voxelIndex] = voxel;
                }
            }
        }
    }
};